# https://docs.github.com/en/actions
name: "Release"
run-name: "Build release"
on:
  push:
    tags:
      - "v*.*.*"
jobs:
  release:
    name: "Release"
    runs-on: "ubuntu-latest"
    permissions: write-all
    steps:
      - name: "Determine tag"
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'
      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: process.env.RELEASE_TAG.includes('-alpha') || process.env.RELEASE_TAG.includes('-beta') || process.env.RELEASE_TAG.includes('-rc') ? true : false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
              core.exportVariable('RELEASE_ID', response.data.id);
            } catch (error) {
              core.setFailed(error.message);
            }
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: "Find module.json"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const globber = await glob.create('module.json');
              const file = (await globber.glob())[0];
              console.log({file});
              core.exportVariable('MODULE_JSON_PATH', file);
            } catch (error) {
              core.setFailed(error.message);
            }
      - name: "Read module.json"
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const fs = require('fs');
              const jsonString = fs.readFileSync(process.env.MODULE_JSON_PATH);
              const apps = JSON.parse(jsonString);
              core.exportVariable('MODULE_JSON_DATA', apps);
            } catch(error) {
              core.setFailed(error.message);
            }
      - name: "Add module.json"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: "module.json",
                data: process.env.MODULE_JSON_DATA,
              })
            } catch (error) {
              core.setFailed(error.message);
            }
